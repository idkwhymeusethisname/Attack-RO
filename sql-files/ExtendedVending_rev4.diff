 conf/battle/feature.conf   |  24 ++++++
 conf/msg_conf/map_msg.conf |  11 +++
 src/map/battle.cpp         |  10 +++
 src/map/battle.hpp         |  10 +++
 src/map/buyingstore.hpp    |   1 +
 src/map/clif.cpp           |  66 +++++++++++++++-
 src/map/clif.hpp           |   3 +
 src/map/itemdb.cpp         |  30 +++++++
 src/map/itemdb.hpp         |  14 ++++
 src/map/map.cpp            |   2 +-
 src/map/pc.hpp             |   6 ++
 src/map/skill.cpp          |  75 +++++++++++++++++-
 src/map/skill.hpp          |   1 +
 src/map/vending.cpp        | 191 ++++++++++++++++++++++++++++++++++++++++-----
 14 files changed, 422 insertions(+), 22 deletions(-)

diff --git a/conf/battle/feature.conf b/conf/battle/feature.conf
index 2747fe538..dd7a4658c 100644
--- a/conf/battle/feature.conf
+++ b/conf/battle/feature.conf
@@ -103,3 +103,27 @@ feature.attendance: on
 // Private Airship System (Note 1)
 // Requires: 2018-03-21aRagexeRE or later
 feature.privateairship: on
+
+// Extended Vending System [Lilith]
+// Enable or disable extended vending system? (Note 1)
+extended_vending: on
+
+// Enable show broadcas info when player click vending board (Note 1)
+show_broadcas_info: on
+
+// Show currency's name in vending board? (Note 1)
+show_item_vending: on
+
+// Show more info about buying? (Note 1)
+ex_vending_info: on
+
+// Easycore Feature
+// Send a Vending Report to mailbox/rodex vendor? (Note 1)
+// Set the variable 'NOVREPORT' for avoid mails to a player
+ex_vending_report: on
+
+// Item ID for Zeny. Set to 0 if you don't want use Zeny.
+item_zeny: 30000
+
+// Item ID for Cash. Set to 0 if you don't want use Cash.
+item_cash: 30001
\ No newline at end of file
diff --git a/conf/msg_conf/map_msg.conf b/conf/msg_conf/map_msg.conf
index 0eee3d414..1028ff64d 100644
--- a/conf/msg_conf/map_msg.conf
+++ b/conf/msg_conf/map_msg.conf
@@ -1698,5 +1698,16 @@
 1503: You've entered a PK Zone.
 1504: You've entered a PK Zone (safe until level %d).
 
+// Extended Vending system [Lilith]
+1590: You do not have enough CashPoint
+1591: You do not have enough items
+1592: Seller has not enough space in your inventory
+1593: Seller can not take all the item
+1594: You have selected: %s
+1595: You've opened %s's shop. Sale is carried out: %s
+1596: Current Currency: %s
+1597: %s has bought '%s' in the amount  of %d. Revenue: %d %s
+1598: Full revenue from %s is %d %s
+
 //Custom translations
 import: conf/msg_conf/import/map_msg_eng_conf.txt
diff --git a/src/map/battle.cpp b/src/map/battle.cpp
index c9839c9e1..71fff972f 100644
--- a/src/map/battle.cpp
+++ b/src/map/battle.cpp
@@ -8531,6 +8531,16 @@ static const struct _battle_data {
 	{ "min_shop_sell",                      &battle_config.min_shop_sell,                   0,      0,      INT_MAX,        },
 	{ "feature.equipswitch",                &battle_config.feature_equipswitch,             1,      0,      1,              },
 	{ "pet_walk_speed",                     &battle_config.pet_walk_speed,                  1,      1,      3,              },
+	/**
+	* Extended Vending system [Lilith]
+	**/
+	{ "extended_vending",					&battle_config.extended_vending,				1,		0,		1,				},
+	{ "show_broadcas_info",					&battle_config.show_broadcas_info,				1,		0,		1,				},
+	{ "show_item_vending",					&battle_config.show_item_vending,				1,		0,		1,				},
+	{ "ex_vending_info",					&battle_config.ex_vending_info,					1,		0,		1,				},
+	{ "ex_vending_report",					&battle_config.ex_vending_report,				1,		0,		1,				}, // [Easycore]
+	{ "item_zeny",							&battle_config.item_zeny,						0,		0,		MAX_ITEMID,		},
+	{ "item_cash",							&battle_config.item_cash,						0,		0,		MAX_ITEMID,		},
 
 #include "../custom/battle_config_init.inc"
 };
diff --git a/src/map/battle.hpp b/src/map/battle.hpp
index 996614d90..9ad0dd4c9 100644
--- a/src/map/battle.hpp
+++ b/src/map/battle.hpp
@@ -659,6 +659,16 @@ struct Battle_Config
 	int min_shop_sell;
 	int feature_equipswitch;
 	int pet_walk_speed;
+	/**
+	* Extended Vending system [Lilith]
+	**/
+	int extended_vending;
+	int show_broadcas_info;
+	int show_item_vending;
+	int ex_vending_info;
+	int ex_vending_report;
+	int item_zeny;
+	int item_cash;
 
 #include "../custom/battle_config_struct.inc"
 };
diff --git a/src/map/buyingstore.hpp b/src/map/buyingstore.hpp
index 0c052d472..8bb62f9bf 100644
--- a/src/map/buyingstore.hpp
+++ b/src/map/buyingstore.hpp
@@ -50,6 +50,7 @@ struct s_autotrader {
 		sit; ///< Is sitting?
 	char title[MESSAGE_SIZE]; ///< Store name
 	uint32 limit; ///< Maximum zeny to be spent (for buyingstore)
+	unsigned short vend_loot;		// Extended Vending system [Lilith]
 	uint16 count; ///< Number of item in store
 	struct s_autotrade_entry **entries; ///< Store details
 	struct map_session_data *sd;
diff --git a/src/map/clif.cpp b/src/map/clif.cpp
index 51a3b12a5..ca5aa99ce 100644
--- a/src/map/clif.cpp
+++ b/src/map/clif.cpp
@@ -7153,6 +7153,13 @@ void clif_openvendingreq(struct map_session_data* sd, int num)
 
 	nullpo_retv(sd);
 
+	// Vending shouldn't open if vend_loot is 0 and extended vending is enabled [Easycore]
+	ShowWarning("vend loot = %d\n", sd->vend_loot);
+	if (battle_config.extended_vending && sd->vend_loot == 0) {
+		sd->state.prevend = 0;
+		return;
+	}
+
 	fd = sd->fd;
 	WFIFOHEAD(fd,packet_len(0x12d));
 	WFIFOW(fd,0) = 0x12d;
@@ -12764,6 +12771,9 @@ void clif_parse_SelectArrow(int fd,struct map_session_data *sd) {
 		case NC_MAGICDECOY:
 			skill_magicdecoy(sd,nameid);
 			break;
+		case MC_VENDING:
+			skill_vending(sd, nameid);
+			break;
 	}
 
 	clif_menuskill_clear(sd);
@@ -13439,11 +13449,18 @@ void clif_parse_PurchaseReq2(int fd, struct map_session_data* sd){
 ///     0 = canceled
 ///     1 = open
 void clif_parse_OpenVending(int fd, struct map_session_data* sd){
+	struct item_data *item = itemdb_exists(sd->vend_loot);
 	int cmd = RFIFOW(fd,0);
 	struct s_packet_db* info = &packet_db[cmd];
 	short len = (short)RFIFOW(fd,info->pos[0]);
 	const char* message = RFIFOCP(fd,info->pos[1]);
 	const uint8* data = (uint8*)RFIFOP(fd,info->pos[3]);
+	char out_msg[1024];
+
+	if (battle_config.extended_vending && battle_config.show_item_vending && sd->vend_loot) {
+		memset(out_msg, '\0', sizeof(out_msg));
+		strcat(strcat(strcat(strcat(out_msg, "["), item->jname), "] "), message);
+	}
 
 	if(cmd == 0x12f){ // (CZ_REQ_OPENSTORE)
 		len -= 84;
@@ -13473,7 +13490,10 @@ void clif_parse_OpenVending(int fd, struct map_session_data* sd){
 	if( message[0] == '\0' ) // invalid input
 		return;
 
-	vending_openvending(sd, message, data, len/8, NULL);
+	if (battle_config.extended_vending && battle_config.show_item_vending && sd->vend_loot)
+		vending_openvending(sd, out_msg, data, len / 8, NULL);
+	else
+		vending_openvending(sd, message, data, len / 8, NULL);
 }
 
 
@@ -20023,6 +20043,50 @@ void clif_hat_effect_single( struct map_session_data* sd, uint16 effectId, bool
 #endif
 }
 
+/**
+* Extended Vending system [Lilith]
+**/
+int clif_vend(struct map_session_data *sd, int skill_lv) {
+
+	struct item_data *item;
+	int c, i, d = 0;
+	int fd;
+
+	nullpo_ret(sd);
+
+	fd = sd->fd;
+	WFIFOHEAD(fd, 8 * 8 + 8);
+	WFIFOW(fd, 0) = 0x1ad;
+	if (battle_config.item_zeny) {
+		WFIFOW(fd, d * 2 + 4) = ITEMID_ZENY;
+		d++;
+
+	}
+	if (battle_config.item_cash) {
+		WFIFOW(fd, d * 2 + 4) = ITEMID_CASH;
+		d++;
+	}
+	for (c = d, i = 0; i < ARRAYLENGTH(item_vend); i++) {
+		if ((item = itemdb_exists(item_vend[i].itemid)) != NULL &&
+			item->nameid != ITEMID_ZENY && item->nameid != ITEMID_CASH) {
+			WFIFOW(fd, c * 2 + 4) = item->nameid;
+			c++;
+
+		}
+	}
+	if (c > 0) {
+		sd->menuskill_id = MC_VENDING;
+		sd->menuskill_val = skill_lv;
+		WFIFOW(fd, 2) = c * 2 + 4;
+		WFIFOSET(fd, WFIFOW(fd, 2));
+	}
+	else {
+		clif_skill_fail(sd, MC_VENDING, USESKILL_FAIL_LEVEL, 0);
+		return 0;
+	}
+
+	return 1;
+}
 
 /// Notify the client that a sale has started
 /// 09b2 <item id>.W <remaining time>.L (ZC_NOTIFY_BARGAIN_SALE_SELLING)
diff --git a/src/map/clif.hpp b/src/map/clif.hpp
index 5d9a031a0..aa4e41440 100644
--- a/src/map/clif.hpp
+++ b/src/map/clif.hpp
@@ -1127,4 +1127,7 @@ void clif_equipswitch_reply( struct map_session_data* sd, bool failed );
 /// Pet evolution
 void clif_pet_evolution_result( struct map_session_data* sd, e_pet_evolution_result result );
 
+/// Extended Vending [Lilith]
+int clif_vend(struct map_session_data *sd, int skill_lv);
+
 #endif /* CLIF_HPP */
diff --git a/src/map/itemdb.cpp b/src/map/itemdb.cpp
index 98bd999a5..27ca9ecce 100644
--- a/src/map/itemdb.cpp
+++ b/src/map/itemdb.cpp
@@ -30,6 +30,7 @@ static DBMap *itemdb_randomopt_group; /// Random option group DB
 struct item_data *dummy_item; /// This is the default dummy item used for non-existant items. [Skotlex]
 
 struct s_roulette_db rd;
+struct s_item_vend item_vend[MAX_INVENTORY]; /// Technoken
 
 /**
 * Check if combo exists
@@ -1239,6 +1240,33 @@ static void itemdb_roulette_free(void) {
 	}
 }
 
+/**
+* Extended Vending system [Lilith]
+**/
+static bool itemdb_read_vending(char* fields[], int columns, int current)
+{
+	struct item_data* id;
+	unsigned short nameid;
+
+	nameid = atoi(fields[0]);
+
+	if ((id = itemdb_exists(nameid)) == NULL)
+	{
+		ShowWarning("itemdb_read_vending: Invalid item id %hu.\n", nameid);
+		return false;
+	}
+
+	if (id->type == IT_ARMOR || id->type == IT_WEAPON || id->type == IT_SHADOWGEAR)
+	{
+		ShowWarning("itemdb_read_vending: item id %hu cannot be equipment or weapon.\n", nameid);
+		return false;
+	}
+
+	item_vend[current].itemid = nameid;
+
+	return true;
+}
+
 /*======================================
  * Applies gender restrictions according to settings. [Skotlex]
  *======================================*/
@@ -1866,6 +1894,7 @@ static void itemdb_read(void) {
 		sv_readdb(dbsubpath1, "item_findingore.txt",	',', 2, 10, -1, &itemdb_read_group, i > 0);
 		sv_readdb(dbsubpath2, "item_giftbox.txt",		',', 2, 10, -1, &itemdb_read_group, i > 0);
 		sv_readdb(dbsubpath2, "item_misc.txt",			',', 2, 10, -1, &itemdb_read_group, i > 0);
+		sv_readdb(dbsubpath1, "item_vending.txt",		',', 1, 1, ARRAYLENGTH(item_vend), &itemdb_read_vending, i); // Extended Vending system [Lilith]
 #ifdef RENEWAL
 		sv_readdb(dbsubpath2, "item_package.txt",		',', 2, 10, -1, &itemdb_read_group, i > 0);
 #endif
@@ -2001,6 +2030,7 @@ void itemdb_reload(void) {
 	itemdb_randomopt_group->clear(itemdb_randomopt_group, itemdb_randomopt_group_free);
 	itemdb->clear(itemdb, itemdb_final_sub);
 	db_clear(itemdb_combo);
+	memset(item_vend, 0, sizeof(item_vend)); // Extended Vending system [Lilith]
 	if (battle_config.feature_roulette)
 		itemdb_roulette_free();
 
diff --git a/src/map/itemdb.hpp b/src/map/itemdb.hpp
index 564a80ca1..5582f1ba4 100644
--- a/src/map/itemdb.hpp
+++ b/src/map/itemdb.hpp
@@ -791,6 +791,14 @@ struct s_roulette_db {
 };
 extern struct s_roulette_db rd;
 
+/**
+* Extended Vending system [Lilith]
+**/
+struct s_item_vend {
+	unsigned short itemid;
+};
+extern struct s_item_vend item_vend[MAX_INVENTORY];
+
 ///Main item data struct
 struct item_data
 {
@@ -970,4 +978,10 @@ void itemdb_reload(void);
 void do_final_itemdb(void);
 void do_init_itemdb(void);
 
+/**
+* Extended Vending system [Lilith]
+**/
+#define ITEMID_ZENY battle_config.item_zeny
+#define ITEMID_CASH battle_config.item_cash
+
 #endif /* ITEMDB_HPP */
diff --git a/src/map/map.cpp b/src/map/map.cpp
index 447d2686b..5eea3365c 100644
--- a/src/map/map.cpp
+++ b/src/map/map.cpp
@@ -120,7 +120,7 @@ static struct block_list *bl_list[BL_LIST_MAX];
 static int bl_list_count = 0;
 
 #ifndef MAP_MAX_MSG
-	#define MAP_MAX_MSG 1550
+	#define MAP_MAX_MSG 1600
 #endif
 
 struct map_data map[MAX_MAP_PER_SERVER];
diff --git a/src/map/pc.hpp b/src/map/pc.hpp
index bd1408cfe..cd8d82087 100644
--- a/src/map/pc.hpp
+++ b/src/map/pc.hpp
@@ -745,6 +745,12 @@ struct map_session_data {
 		bool claimPrize;
 		t_tick tick;
 	} roulette;
+	
+	/**
+	* Extended Vending system [Lilith]
+	**/
+	unsigned short vend_loot;
+	int vend_lvl;
 
 	unsigned short instance_id;
 	short setlook_head_top, setlook_head_mid, setlook_head_bottom, setlook_robe; ///< Stores 'setlook' script command values.
diff --git a/src/map/skill.cpp b/src/map/skill.cpp
index 127106761..710df2701 100755
--- a/src/map/skill.cpp
+++ b/src/map/skill.cpp
@@ -7621,11 +7621,47 @@ int skill_castend_nodamage_id (struct block_list *src, struct block_list *bl, ui
 				sd->state.prevend = 1;
 				sd->state.workinprogress = WIP_DISABLE_ALL;
 				sd->vend_skill_lv = skill_lv;
+				sd->vend_loot = 0;
 				ARR_FIND(0, MAX_CART, i, sd->cart.u.items_cart[i].nameid && sd->cart.u.items_cart[i].id == 0);
 				if (i < MAX_CART)
 					intif_storage_save(sd, &sd->cart);
-				else
-					clif_openvendingreq(sd,2+skill_lv);
+				if (battle_config.extended_vending) {
+					struct item_data *item;
+					char output[1024];
+					int c = 0, i, d = 0;
+					sd->vend_lvl = skill_lv;
+					if (battle_config.item_zeny)
+						d++;
+					if (battle_config.item_cash)
+						d++;
+					for (c = d, i = 0; i < ARRAYLENGTH(item_vend); i++) {
+						if ((item = itemdb_exists(item_vend[i].itemid)) != NULL &&
+							item->nameid != ITEMID_ZENY && item->nameid != ITEMID_CASH)
+							c++;
+					}
+
+					if (c > 1)
+						clif_vend(sd, sd->vend_lvl);
+					else {
+						sd->state.prevend = 1;
+						if (c) {
+							item = itemdb_exists(battle_config.item_zeny ? battle_config.item_zeny : battle_config.item_cash ? battle_config.item_cash : item_vend[0].itemid);
+							sd->vend_loot = item->nameid;
+							sprintf(output, msg_txt(sd, 1596), itemdb_jname(sd->vend_loot));
+							clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], output, false, SELF);
+							clif_openvendingreq(sd, 2 + sd->vend_lvl);
+						}
+						else {
+							sd->vend_loot = 0;
+							clif_openvendingreq(sd, 2 + sd->vend_lvl);
+						}
+					}
+				}
+				else {
+					sd->vend_loot = 0;
+					sd->state.prevend = 1;
+					clif_openvendingreq(sd, 2 + skill_lv);
+				}
 			}
 		}
 		break;
@@ -16923,6 +16959,41 @@ void skill_identify(struct map_session_data *sd, int idx)
 	clif_item_identified(sd,idx,flag);
 }
 
+/**
+* Extended Vending system [Lilith]
+**/
+int skill_vending(struct map_session_data *sd, unsigned short nameid) {
+	struct item_data *item;
+	char output[1024];
+	nullpo_ret(sd);
+	if (!pc_can_give_items(sd)) {
+		clif_skill_fail(sd, MC_VENDING, USESKILL_FAIL_LEVEL, 0);
+		sd->state.prevend = 0;
+		sd->state.workinprogress = WIP_DISABLE_NONE;
+		return 0;
+	}
+	if (nameid <= 0 || nameid >= (MAX_ITEMID)) {
+		clif_skill_fail(sd, MC_VENDING, USESKILL_FAIL_LEVEL, 0);
+		sd->state.prevend = 0;
+		sd->state.workinprogress = WIP_DISABLE_NONE;
+		return 0;
+	}
+	if ((item = itemdb_exists(nameid)) == NULL) {
+		clif_skill_fail(sd, MC_VENDING, USESKILL_FAIL_LEVEL, 0);
+		sd->state.prevend = 0;
+		sd->state.workinprogress = WIP_DISABLE_NONE;
+		return 0;
+	}
+
+	sd->vend_loot = nameid;
+	sd->state.prevend = 1;
+	clif_openvendingreq(sd, 2 + sd->vend_lvl);
+	sprintf(output, msg_txt(sd, 1594), item->jname);
+	clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], output, false, SELF);
+
+	return 0;
+}
+
 /*==========================================
  * Weapon Refine [Celest]
  *------------------------------------------*/
diff --git a/src/map/skill.hpp b/src/map/skill.hpp
index 8fe8fabcd..288dd9762 100644
--- a/src/map/skill.hpp
+++ b/src/map/skill.hpp
@@ -2222,6 +2222,7 @@ void skill_combo(struct block_list* src,struct block_list *dsrc, struct block_li
 void skill_reveal_trap_inarea(struct block_list *src, int range, int x, int y);
 int skill_get_time3(struct map_data *mapdata, uint16 skill_id, uint16 skill_lv);
 
+int skill_vending(struct map_session_data *sd, unsigned short nameid); //Extended Vending [Lilith]
 /// Variable name of copied skill by Plagiarism
 #define SKILL_VAR_PLAGIARISM "CLONE_SKILL"
 /// Variable name of copied skill level by Plagiarism
diff --git a/src/map/vending.cpp b/src/map/vending.cpp
index f2232be49..97dfcc4b3 100755
--- a/src/map/vending.cpp
+++ b/src/map/vending.cpp
@@ -18,6 +18,7 @@
 #include "buyingstore.hpp" // struct s_autotrade_entry, struct s_autotrader
 #include "chrif.hpp"
 #include "clif.hpp"
+#include "intif.hpp"
 #include "itemdb.hpp"
 #include "log.hpp"
 #include "npc.hpp"
@@ -25,6 +26,7 @@
 #include "pc.hpp"
 #include "pc_groups.hpp"
 
+
 static uint32 vending_nextid = 0; ///Vending_id counter
 static DBMap *vending_db; ///DB holder the vender : charid -> map_session_data
 
@@ -91,6 +93,18 @@ void vending_vendinglistreq(struct map_session_data* sd, int id)
 		clif_displaymessage(sd->fd, msg_txt(sd,246));
 		return;
 	}
+	
+	/**
+	* Extended Vending system [Lilith]
+	**/
+	if (battle_config.extended_vending && vsd->vend_loot) {
+		char output[1024]; // Extended Vending system [Lilith]
+		sprintf(output, msg_txt(sd, 1595), vsd->status.name, itemdb_jname(vsd->vend_loot));
+		if (battle_config.show_broadcas_info)
+			clif_broadcast(&sd->bl, output, (int)strlen(output) + 1, 0x10, SELF);
+		else
+			clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], output, false, SELF);
+	}
 
 	sd->vended_id = vsd->vender_id;  // register vending uid
 
@@ -170,14 +184,69 @@ void vending_purchasereq(struct map_session_data* sd, int aid, int uid, const ui
 		else
 			vend_list[i] = j;
 
-		z += ((double)vsd->vending[j].value * (double)amount);
-		if( z > (double)sd->status.zeny || z < 0. || z > (double)MAX_ZENY ) {
-			clif_buyvending(sd, idx, amount, 1); // you don't have enough zeny
-			return;
+		z += ((double)vsd->vending[j].value * (double)amount);	
+		/**
+		* Extended Vending system [Lilith]
+		**/
+		if (battle_config.extended_vending) {
+			if (vsd->vend_loot == ITEMID_ZENY || !vsd->vend_loot) {
+				if (z > (double)sd->status.zeny || z < 0. || z >(double)MAX_ZENY)
+				{
+					//clif_buyvending(sd, idx, amount, 1); // you don't have enough zeny
+					return;
+				}
+				if (z + (double)vsd->status.zeny > (double)MAX_ZENY && !battle_config.vending_over_max)
+				{
+					clif_buyvending(sd, idx, vsd->vending[j].amount, 4); // too much zeny = overflow
+					return;
+				}
+			}
+			else if (vsd->vend_loot == ITEMID_CASH) {
+				if (z > sd->cashPoints || z < 0. || z >(double)MAX_ZENY) {
+					clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], msg_txt(sd, 1590), false, SELF);
+					return;
+				}
+			}
+			else {
+				int k, loot_count = 0, vsd_w = 0;
+				for (k = 0; k < MAX_INVENTORY; k++) {
+					if (sd->inventory.u.items_inventory[k].bound) {
+						clif_displaymessage(sd->fd, "Cannot buy with Bound Items.");
+						return;
+					}
+					if (sd->inventory.u.items_inventory[k].nameid == vsd->vend_loot)
+						loot_count += sd->inventory.u.items_inventory[k].amount;
+				}
+ 
+				if (z > loot_count || z < 0)
+				{
+					clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], msg_txt(sd, 1591), false, SELF);
+					return;
+				}
+				if (pc_inventoryblank(vsd) <= 0)
+				{
+					clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], msg_txt(sd, 1592), false, SELF);
+					return;
+				}
+				vsd_w += itemdb_weight(vsd->vend_loot) * (int)z;
+				if (vsd_w + vsd->weight > vsd->max_weight)
+				{
+					clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], msg_txt(sd, 1593), false, SELF);
+					return;
+				}
+			}
 		}
-		if( z + (double)vsd->status.zeny > (double)MAX_ZENY && !battle_config.vending_over_max ) {
-			clif_buyvending(sd, idx, vsd->vending[j].amount, 4); // too much zeny = overflow
-			return;
+		else {
+			if (z > (double)sd->status.zeny || z < 0. || z >(double)MAX_ZENY)
+			{
+				clif_buyvending(sd, idx, amount, 1); // you don't have enough zeny
+				return;
+			}
+			if (z + (double)vsd->status.zeny > (double)MAX_ZENY && !battle_config.vending_over_max)
+			{
+				clif_buyvending(sd, idx, vsd->vending[j].amount, 4); // too much zeny = overflow
+				return;
+			}
 
 		}
 		w += itemdb_weight(vsd->cart.u.items_cart[idx].nameid) * amount;
@@ -213,17 +282,47 @@ void vending_purchasereq(struct map_session_data* sd, int aid, int uid, const ui
 		}
 	}
 
-	pc_payzeny(sd, (int)z, LOG_TYPE_VENDING, vsd);
-	achievement_update_objective(sd, AG_SPEND_ZENY, 1, (int)z);
-	z = vending_calc_tax(sd, z);
-	pc_getzeny(vsd, (int)z, LOG_TYPE_VENDING, sd);
+	/**
+	* Extended Vending system [Lilith]
+	**/
+	if (battle_config.extended_vending) {
+		if (vsd->vend_loot == ITEMID_ZENY || !vsd->vend_loot) {
+			pc_payzeny(sd, (int)z, LOG_TYPE_VENDING, vsd);
+			achievement_update_objective(sd, AG_SPEND_ZENY, 1, (int)z);
+			z = vending_calc_tax(sd, z);
+			pc_getzeny(vsd, (int)z, LOG_TYPE_VENDING, sd);
+		}
+		else if (vsd->vend_loot == ITEMID_CASH) {
+			pc_paycash(sd, (int)z, 0, LOG_TYPE_VENDING);
+			pc_getcash(vsd, (int)z, 0, LOG_TYPE_VENDING);
+		}
+		else {
+			for (i = 0; i < MAX_INVENTORY; i++)
+				if (sd->inventory.u.items_inventory[i].nameid == vsd->vend_loot)
+				{
+					struct item *item;
+					item = &sd->inventory.u.items_inventory[i];
+					pc_additem(vsd, item, (int)z, LOG_TYPE_VENDING);
+				}
+			pc_delitem(sd, pc_search_inventory(sd, vsd->vend_loot), (int)z, 0, 6, LOG_TYPE_VENDING);
+		}
+	}
+	else {
+		pc_payzeny(sd, (int)z, LOG_TYPE_VENDING, vsd);
+		achievement_update_objective(sd, AG_SPEND_ZENY, 1, (int)z);
+		z = vending_calc_tax(sd, z);
+		pc_getzeny(vsd, (int)z, LOG_TYPE_VENDING, sd);
+	}
+	int mailprofit = 0;
 
 	for( i = 0; i < count; i++ ) {
 		short amount = *(uint16*)(data + 4*i + 0);
 		short idx    = *(uint16*)(data + 4*i + 2);
 		idx -= 2;
 		z = 0.; // zeny counter
-
+		
+		// Store Item Name [Easycore]
+		const char *item_name = itemdb_jname(vsd->cart.u.items_cart[idx].nameid);
 		// vending item
 		pc_additem(sd, &vsd->cart.u.items_cart[idx], amount, LOG_TYPE_VENDING);
 		vsd->vending[vend_list[i]].amount -= amount;
@@ -246,8 +345,55 @@ void vending_purchasereq(struct map_session_data* sd, int aid, int uid, const ui
 		//print buyer's name
 		if( battle_config.buyer_name ) {
 			char temp[256];
-			sprintf(temp, msg_txt(sd,265), sd->status.name);
-			clif_messagecolor(&vsd->bl, color_table[COLOR_LIGHT_GREEN], temp, false, SELF);
+			if (battle_config.ex_vending_info) {// Extended Vending system [Lilith]
+				double rev = ((double)vsd->vending[vend_list[i]].value * (double)amount);
+				if (vsd->vend_loot == ITEMID_ZENY)
+					sprintf(temp, msg_txt(sd, 1597), sd->status.name, item_name, amount, (int)(rev -= rev * (battle_config.vending_tax / 10000.)),"Zeny");
+				else
+					sprintf(temp, msg_txt(sd, 1597), sd->status.name, item_name, amount, (int)rev, itemdb_jname(vsd->vend_loot)); //No Tax for Items/Cash [Easycore]
+			} else
+				sprintf(temp, msg_txt(sd, 265), sd->status.name);
+			clif_displaymessage(vsd->fd, temp);
+		}
+		if (battle_config.ex_vending_info) { // Extended Vending system [Lilith]
+			char temp[256];
+			double frev = ((double)vsd->vending[vend_list[i]].value * (double)amount);
+			sprintf(temp, msg_txt(sd,1598), sd->status.name, (int)frev, vsd->vend_loot?itemdb_jname(vsd->vend_loot):"Zeny");
+			clif_displaymessage(vsd->fd, temp);
+		}
+		if (battle_config.ex_vending_report && pc_readglobalreg(vsd, add_str("NOVREPORT")) == 0 ) { // Vending Report MailBox [Easycore]
+			const char *sender, *title, *body;
+			struct mail_message msg;
+			char message[1000];
+			mailprofit += vsd->vending[vend_list[i]].value *amount;
+			memset(&msg, 0, sizeof(struct mail_message));
+			msg.dest_id = vsd->status.char_id;
+			sender = "Server";
+			safestrncpy(msg.send_name, sender, NAME_LENGTH);
+			title = "Vending Report";
+			safestrncpy(msg.title, title, MAIL_TITLE_LENGTH);
+			if (i == 0)
+				sprintf(message, "[%s] has bought in your store: \r\n", sd->status.name);
+			#if PACKETVER >= 20150513 // Old mail box is too shorter [Easycore]
+			if (i >= 0 && strlen(message)<180)
+				sprintf(message + strlen(message), "   - %s x %d ea\r\n", item_name, amount);
+			else if (strlen(message)<200)
+				sprintf(message + strlen(message), "......and more\r\n");
+			#endif
+			if (i == count-1) {
+				if (vsd->vend_loot == ITEMID_ZENY)
+					sprintf(message + strlen(message), "Total profit: %s x %d", "Zeny" ,(mailprofit -= mailprofit * (int)(battle_config.vending_tax / 10000.)));
+				else
+					sprintf(message + strlen(message), "Total profit: %s x %d",itemdb_jname(vsd->vend_loot) ,mailprofit); //No Tax for Items/Cash [Easycore]
+			}
+			body = message;
+			safestrncpy(msg.body, body, MAIL_BODY_LENGTH);
+			msg.status = MAIL_NEW;
+			msg.type = MAIL_INBOX_NORMAL;
+			msg.timestamp = time(NULL);
+			if (i==count-1)
+				intif_Mail_send(0, &msg);
+
 		}
 	}
 
@@ -367,9 +513,9 @@ int8 vending_openvending(struct map_session_data* sd, const char* message, const
 	
 	Sql_EscapeString( mmysql_handle, message_sql, sd->message );
 
-	if( Sql_Query( mmysql_handle, "INSERT INTO `%s`(`id`, `account_id`, `char_id`, `sex`, `map`, `x`, `y`, `title`, `autotrade`, `body_direction`, `head_direction`, `sit`) "
-		"VALUES( %d, %d, %d, '%c', '%s', %d, %d, '%s', %d, '%d', '%d', '%d' );",
-		vendings_table, sd->vender_id, sd->status.account_id, sd->status.char_id, sd->status.sex == SEX_FEMALE ? 'F' : 'M', map_getmapdata(sd->bl.m)->name, sd->bl.x, sd->bl.y, message_sql, sd->state.autotrade, at ? at->dir : sd->ud.dir, at ? at->head_dir : sd->head_dir, at ? at->sit : pc_issit(sd) ) != SQL_SUCCESS ) {
+	if (Sql_Query(mmysql_handle, "INSERT INTO `%s`(`id`, `account_id`, `char_id`, `sex`, `map`, `x`, `y`, `title`, `autotrade`, `body_direction`, `head_direction`, `sit`, `extended_vending_item`) "
+		"VALUES( %d, %d, %d, '%c', '%s', %d, %d, '%s', %d, '%d', '%d', '%d', '%hu' );",
+		vendings_table, sd->vender_id, sd->status.account_id, sd->status.char_id, sd->status.sex == SEX_FEMALE ? 'F' : 'M', map_getmapdata(sd->bl.m)->name, sd->bl.x, sd->bl.y, message_sql, sd->state.autotrade, at ? at->dir : sd->ud.dir, at ? at->head_dir : sd->head_dir, at ? at->sit : pc_issit(sd), sd->vend_loot) != SQL_SUCCESS) {
 		Sql_ShowDebug(mmysql_handle);
 	}
 
@@ -527,6 +673,8 @@ void vending_reopen( struct map_session_data* sd )
 				skill_sit(sd, 1);
 				clif_sitting(&sd->bl);
 			}
+			// Extended Vending system [Lilith]
+			sd->vend_loot = at->vend_loot;
 
 			// Immediate save
 			chrif_save(sd, CSAVE_AUTOTRADE);
@@ -556,7 +704,7 @@ void do_init_vending_autotrade(void)
 {
 	if (battle_config.feature_autotrade) {
 		if (Sql_Query(mmysql_handle,
-			"SELECT `id`, `account_id`, `char_id`, `sex`, `title`, `body_direction`, `head_direction`, `sit` "
+			"SELECT `id`, `account_id`, `char_id`, `sex`, `title`, `body_direction`, `head_direction`, `sit`, `extended_vending_item` "
 			"FROM `%s` "
 			"WHERE `autotrade` = 1 AND (SELECT COUNT(`vending_id`) FROM `%s` WHERE `vending_id` = `id`) > 0 "
 			"ORDER BY `id`;",
@@ -586,6 +734,7 @@ void do_init_vending_autotrade(void)
 				Sql_GetData(mmysql_handle, 5, &data, NULL); at->dir = atoi(data);
 				Sql_GetData(mmysql_handle, 6, &data, NULL); at->head_dir = atoi(data);
 				Sql_GetData(mmysql_handle, 7, &data, NULL); at->sit = atoi(data);
+				Sql_GetData(mmysql_handle, 8, &data, NULL); at->vend_loot = atoi(data);		// Extended Vending system [Lilith]
 				at->count = 0;
 
 				if (battle_config.feature_autotrade_direction >= 0)
@@ -595,6 +744,10 @@ void do_init_vending_autotrade(void)
 				if (battle_config.feature_autotrade_sit >= 0)
 					at->sit = battle_config.feature_autotrade_sit;
 
+				// Extended Vending system [Lilith]
+				if (!battle_config.extended_vending)
+					at->vend_loot = 0;
+
 				// initialize player
 				CREATE(at->sd, struct map_session_data, 1);
 				pc_setnewpc(at->sd, at->account_id, at->char_id, 0, gettick(), at->sex, 0);
@@ -603,6 +756,8 @@ void do_init_vending_autotrade(void)
 					at->sd->state.block_action |= PCBLOCK_IMMUNE;
 				else
 					at->sd->state.block_action &= ~PCBLOCK_IMMUNE;
+				// Extended Vending System Fix Bug [CreativeSD]
+				at->sd->vend_loot = at->vend_loot;
 				chrif_authreq(at->sd, true);
 				uidb_put(vending_autotrader_db, at->char_id, at);
 			}
